plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'org.coderforge.ledger'
version = '1.2'

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.0")
    set('dockerDomain', "docker.coderforge.org/ledger-api")
    set('tomcat.version', "11.0.2")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

configurations.configureEach {
    // exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-graphql:3.3.1'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.3.2'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka:4.2.0'
    implementation 'org.springframework.cloud:spring-cloud-stream-schema:2.2.1.RELEASE'
    implementation 'org.springframework.security:spring-security-crypto:6.4.2'
    implementation 'org.springframework.security:spring-security-web:6.4.2'
    implementation 'org.springframework.security:spring-security-config:6.4.2'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
}

testing {
    suites {
        test {
            useJUnitJupiter()
            dependencies {
                implementation('org.springframework.boot:spring-boot-starter-test')
                implementation('org.springframework.boot:spring-boot-test-autoconfigure')
                implementation('com.h2database:h2:2.3.232')
            }
        }

        integrationTest(JvmTestSuite) {
            dependencies {

            }
            targets {
                configureEach {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

tasks.named('check') {
    dependsOn(testing.suites.integrationTest)
}

tasks.register('dockerBuild') {
    group 'Docker Build'
    doLast {
        mkdir("build/docker")
        copy {
            from "docker"
            into "build/docker"
        }
        copy {
            from "build/libs/" + rootProject.name + "-" + version + ".jar"
            into "build/docker/files"
            rename (rootProject.name + "-" + version + ".jar", rootProject.name + '.jar')
        }
        var dockerDomain = project.ext.get("dockerDomain")
        println 'Building local docker image'
        var retValue = new ByteArrayOutputStream().withStream { os ->
            var retValue = exec {
                workingDir = "build/docker"
                executable = 'docker'
                args = ['build', '-t', dockerDomain, '.']
                standardOutput = os
            }.exitValue
            println(os.toString())
            return retValue;
        }
        if (retValue == 0) {
            retValue = new ByteArrayOutputStream().withStream { os2 ->
                var retValue2 = exec {
                    workingDir = "build/docker"
                    executable = 'docker'
                    args = ['image', 'tag', dockerDomain, dockerDomain + ':' + version]
                    standardOutput = os2
                }.exitValue
                println(os2.toString())
                return retValue2;
            }
            if (retValue == 0) {
                println 'Docker build done'
                return retValue;
            }
        }
        println 'Docker build failed'
        return retValue;
    }
}

tasks.named("build") { finalizedBy("dockerBuild") }
